(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{1042:function(t,a,_){t.exports=_.p+"assets/img/eeb708d1e5b2e6d16846a8501413edb1.eeb708d1.png"},1043:function(t,a,_){t.exports=_.p+"assets/img/e09cc18c51a6a63db3ce38351a9cca19.e09cc18c.png"},1044:function(t,a,_){t.exports=_.p+"assets/img/b0b6cbd040a3d078cc9fb8747b18bb38.b0b6cbd0.png"},1045:function(t,a,_){t.exports=_.p+"assets/img/09c408b1bc35f3085fed7413776314cc.09c408b1.png"},1046:function(t,a,_){t.exports=_.p+"assets/img/3228468551acc8361eef193a2902d6a3.32284685.png"},1047:function(t,a,_){t.exports=_.p+"assets/img/204c4351572e560429a1278cc0076520.204c4351.png"},1128:function(t,a,_){"use strict";_.r(a);var s=_(6),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("ul",[s("li",[t._v("事务可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞。")]),t._v(" "),s("li",[t._v("事务再一个队列中，一次性、顺序性、排他性的执行一系列命令。")])]),t._v(" "),s("h1",{attrs:{id:"_1-事务常用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务常用指令"}},[t._v("#")]),t._v(" 1. 事务常用指令")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("命令")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("discard")]),t._v(" "),s("td",[t._v("取消事务，放弃执行事务块内的所有命令")])]),t._v(" "),s("tr",[s("td",[t._v("exec")]),t._v(" "),s("td",[t._v("执行事务块内的所有命令")])]),t._v(" "),s("tr",[s("td",[t._v("multi")]),t._v(" "),s("td",[t._v("标记一个事务块的开始")])]),t._v(" "),s("tr",[s("td",[t._v("unwatch")]),t._v(" "),s("td",[t._v("取消watch命令对所有key的监视")])]),t._v(" "),s("tr",[s("td",[t._v("watch key [key...]")]),t._v(" "),s("td",[t._v("监视一个或者多个key，如果事务执行之前这些key被其他命令所改动，那么事务将会被打断")])])])]),t._v(" "),s("h2",{attrs:{id:"_1-1-正常执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-正常执行"}},[t._v("#")]),t._v(" 1.1 正常执行")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1042),alt:"eeb708d1e5b2e6d16846a8501413edb1.png"}})]),t._v(" "),s("h2",{attrs:{id:"_1-2-放弃执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-放弃执行"}},[t._v("#")]),t._v(" 1.2 放弃执行")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1043),alt:"e09cc18c51a6a63db3ce38351a9cca19.png"}})]),t._v(" "),s("h1",{attrs:{id:"_2-基本机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本机制"}},[t._v("#")]),t._v(" 2. 基本机制")]),t._v(" "),s("h2",{attrs:{id:"_2-1-全体连坐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-全体连坐"}},[t._v("#")]),t._v(" 2.1 “全体连坐”")]),t._v(" "),s("p",[t._v("只要在某一事务的队列中有一个错误，则整个事务全体连坐，一条指令都不执行 -- 类似 java 编译时异常")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1044),alt:"b0b6cbd040a3d078cc9fb8747b18bb38.png"}})]),t._v(" "),s("h2",{attrs:{id:"_2-2-冤有头债有主"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-冤有头债有主"}},[t._v("#")]),t._v(" 2.2 “冤有头债有主”")]),t._v(" "),s("p",[t._v("在某一事务过程中，入队时没有错误的产生，但在顺序执行时产生错误，此时只有当前的错误指令不会被执行，其余在事务队列中的指令顺利执行 -- 类似 java 运行时异常")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1045),alt:"09c408b1bc35f3085fed7413776314cc.png"}})]),t._v(" "),s("h1",{attrs:{id:"_3-watch-监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-watch-监控"}},[t._v("#")]),t._v(" 3. watch 监控")]),t._v(" "),s("h2",{attrs:{id:"_3-1-悲观锁-乐观锁-cas-check-and-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-悲观锁-乐观锁-cas-check-and-set"}},[t._v("#")]),t._v(" 3.1 悲观锁/乐观锁/CAS(check and set)")]),t._v(" "),s("ul",[s("li",[t._v("悲观锁：")])]),t._v(" "),s("p",[t._v("顾名思义，悲观思想。认为每次到库中取出数据进行修改的时候都会有人在此期间对该数据进行修改。所以，在每一次取数据的时候，都会对该数据上锁。")]),t._v(" "),s("p",[t._v("传统关系型数据库就用到了很多这种锁机制，比如行锁，表锁，读锁，写锁等，都是在做操作之前先上锁。")]),t._v(" "),s("ul",[s("li",[t._v("乐观锁：")])]),t._v(" "),s("p",[t._v("顾名思义，乐观思想。认为每次从库中取数据进行修改时都不会有人在此期间对该数据进行修改，所以不会上锁。但是在提交数据的修改的时候，数据库会使用版本号机制判断在此期间别人有没有更新这个数据。")]),t._v(" "),s("p",[t._v("乐观锁适用于多读的应用类型，这样可以提高吞吐量。")]),t._v(" "),s("p",[t._v("乐观锁策略：提交版本必须大于记录当前版本才能执行更新")]),t._v(" "),s("ul",[s("li",[t._v("CAS：")])]),t._v(" "),s("h2",{attrs:{id:"_3-2-watch-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-watch-的使用"}},[t._v("#")]),t._v(" 3.2 watch 的使用")]),t._v(" "),s("p",[t._v("正常使用：")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1046),alt:"3228468551acc8361eef193a2902d6a3.png"}})]),t._v(" "),s("p",[t._v("监控时数据被修改：如果在监控时数据被修改，则整个事务执行失效")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1047),alt:"204c4351572e560429a1278cc0076520.png"}})]),t._v(" "),s("p",[t._v("一旦执行了exec之前加的监控锁都会被取消掉了（一次性）")]),t._v(" "),s("h1",{attrs:{id:"_4-小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[t._v("#")]),t._v(" 4. 小结")]),t._v(" "),s("h2",{attrs:{id:"_4-1-事务执行的三阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-事务执行的三阶段"}},[t._v("#")]),t._v(" 4.1 事务执行的三阶段")]),t._v(" "),s("ul",[s("li",[t._v("开启：以MULTI开始一个事务")]),t._v(" "),s("li",[t._v("入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面")]),t._v(" "),s("li",[t._v("执行：由EXEC命令触发事务")])]),t._v(" "),s("h2",{attrs:{id:"_4-2-事务执行的三特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-事务执行的三特性"}},[t._v("#")]),t._v(" 4.2 事务执行的三特性")]),t._v(" "),s("p",[t._v("Redis 不遵循传统的 ACID 中的 AI")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("单独的隔离操作")]),t._v("：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。")]),t._v(" "),s("li",[s("strong",[t._v("没有隔离级别的概念")]),t._v("：队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题")]),t._v(" "),s("li",[s("strong",[t._v("不保证原子性")]),t._v("：redis 同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚")])])])}),[],!1,null,null,null);a.default=v.exports}}]);