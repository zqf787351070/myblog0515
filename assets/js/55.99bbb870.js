(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{1081:function(s,t,_){"use strict";_.r(t);var a=_(6),v=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_1-xss-跨站脚本攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-xss-跨站脚本攻击"}},[s._v("#")]),s._v(" 1. XSS 跨站脚本攻击")]),s._v(" "),a("p",[s._v("答："),a("strong",[s._v("XSS(Cross-Site Scripting)")]),s._v(" 跨站脚本攻击是一种常见的安全漏洞，恶意攻击者在用户提交的数据中加入一些代码，将代码嵌入到了Web页面中，从而可以盗取用户资料，控制用户行为或者破坏页面结构和样式等。")]),s._v(" "),a("h2",{attrs:{id:"xss-产生的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-产生的原因"}},[s._v("#")]),s._v(" XSS 产生的原因")]),s._v(" "),a("p",[s._v("XSS 产生的原因是过于信任客户端的数据，没有做好过滤或者转义等工作。如果客户端上传的数据中插入一些符号以及 javascript 代码，那么这些数据将会成为应用代码中的一部分了，这样就造成了 XSS 攻击。")]),s._v(" "),a("h2",{attrs:{id:"xss-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-分类"}},[s._v("#")]),s._v(" XSS 分类")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("存储型")]),s._v("：攻击者将恶意代码存储到了数据库中，在响应浏览器请求的时候返回恶意代码，并且执行。这种攻击常见于带有用户保存数据的网站功能；")]),s._v(" "),a("li",[a("strong",[s._v("反射型")]),s._v("：将恶意代码放在 URL 中，将参数提交到服务器。服务器解析后响应，在响应结果中存在 XSS 代码，最终通过浏览器解析执行；")]),s._v(" "),a("li",[a("strong",[s._v("DOM 型")]),s._v("：取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 的安全漏洞。")])]),s._v(" "),a("h2",{attrs:{id:"xss-防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-防御"}},[s._v("#")]),s._v(" XSS 防御")]),s._v(" "),a("ul",[a("li",[s._v("对重要的 cookie 设置 httpOnly, 防止客户端通过document.cookie读取 cookie；")]),s._v(" "),a("li",[s._v("对输入内容的特定字符进行编码，前端后端都可以对传入的内容进行过滤，去掉带 javascript 等字段的输入")])]),s._v(" "),a("h1",{attrs:{id:"_2-csrf-跨站请求伪造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-csrf-跨站请求伪造"}},[s._v("#")]),s._v(" 2. CSRF 跨站请求伪造")]),s._v(" "),a("p",[s._v("答："),a("strong",[s._v("CSRF(Cross-site request forgery)")]),s._v(" 跨站请求伪造，也是一种常见的安全漏洞。XSS 相当于是控制了站点内的信任用户，而 CSRF 则通过伪装成受信任用户的请求来利用受信任的网站。")]),s._v(" "),a("h2",{attrs:{id:"csrf-流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-流程"}},[s._v("#")]),s._v(" CSRF 流程")]),s._v(" "),a("p",[a("img",{attrs:{src:_(677),alt:"9d673e2a8d03337b5494817138c8c1ea.png"}})]),s._v(" "),a("h2",{attrs:{id:"csrf-防御"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-防御"}},[s._v("#")]),s._v(" CSRF 防御")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Referer 头验证")]),s._v("：在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。不靠谱，Referer可以被改变；")]),s._v(" "),a("li",[a("strong",[s._v("Token验证")]),s._v("：服务器发送给客户端一个 Token，客户端提交的表单中（或者 URL 上）带着这个 Token。如果这个 Token 不合法，那么服务器拒绝这个请求；")]),s._v(" "),a("li",[a("strong",[s._v("双重Cookie验证")]),s._v("：利用恶意网站无法获取 cookie 信息，仅可冒用的特点，我们将 cookie 中的参数取出来，加入到请求参数中，服务端进行校验，如果参数中没有附加额外的 cookie 中的参数，那么就拒绝请求。")])]),s._v(" "),a("h1",{attrs:{id:"_3-ssrf-服务端请求伪造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-ssrf-服务端请求伪造"}},[s._v("#")]),s._v(" 3. SSRF 服务端请求伪造")]),s._v(" "),a("p",[s._v("答：SSRF 是一种由攻击者构造请求，利用服务端发起的一种安全漏洞。一般情况下， SSRF 攻击的目标是外网无法访问的内部系统，借助于公网上的服务器来访问了内网系统。")]),s._v(" "),a("p",[a("img",{attrs:{src:_(678),alt:"618223244d22a3af487c0c52d8ae8fa4.png"}})]),s._v(" "),a("h2",{attrs:{id:"ssrf-产生原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssrf-产生原因"}},[s._v("#")]),s._v(" SSRF 产生原因")]),s._v(" "),a("p",[s._v("SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。")]),s._v(" "),a("p",[s._v("比如指定 URL 地址获取网页文本内容，加载指定地址的图片和文档等。")]),s._v(" "),a("h2",{attrs:{id:"ssrf-漏洞出现场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssrf-漏洞出现场景"}},[s._v("#")]),s._v(" SSRF 漏洞出现场景")]),s._v(" "),a("ul",[a("li",[s._v("分享场景，通过URL地址分享网页内容。")]),s._v(" "),a("li",[s._v("转码服务，在线翻译场景。")]),s._v(" "),a("li",[s._v("地址加载或下载图片。")]),s._v(" "),a("li",[s._v("图片、文章收藏功能。")]),s._v(" "),a("li",[s._v("未公开的api实现以及其他调用URL的功能等。")])]),s._v(" "),a("h2",{attrs:{id:"ssrf-漏洞危害"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssrf-漏洞危害"}},[s._v("#")]),s._v(" SSRF 漏洞危害")]),s._v(" "),a("p",[s._v("因为外网借助了服务端来实现了对内网服务器的访问，所以很多操作都可以进行，包括如下的危害：")]),s._v(" "),a("ul",[a("li",[s._v("对服务器所在的内网进行端口扫描，获取一些服务的banner信息等。")]),s._v(" "),a("li",[s._v("攻击运行在内网或者本地的应用程序。")]),s._v(" "),a("li",[s._v("对内网WEB应用进行指纹识别，通过访问默认文件实现。")]),s._v(" "),a("li",[s._v("下载内网的一些资源文件等。")])]),s._v(" "),a("h2",{attrs:{id:"ssrf-防御措施"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssrf-防御措施"}},[s._v("#")]),s._v(" SSRF 防御措施")]),s._v(" "),a("ul",[a("li",[s._v("对错误信息进行统一处理，避免用户可以根据错误信息来判断远端服务器的端口状态。")]),s._v(" "),a("li",[s._v("对请求的端口进行限制，限定为 HTTP 常用的端口，比如，80，443 和 8080 等。")]),s._v(" "),a("li",[s._v("设定 IP 黑名单。避免应用被用来获取内网数据，攻击内网。")]),s._v(" "),a("li",[s._v("禁用不需要的协议。")]),s._v(" "),a("li",[s._v("仅仅允许 HTTP 和 HTTPS 请求。对返回信息进行有效过滤等。")])]),s._v(" "),a("h1",{attrs:{id:"_4-sql-注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-sql-注入"}},[s._v("#")]),s._v(" 4. SQL 注入")]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("p",[s._v("SQL 注入是指通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器，执行恶意的 SQL 命令。")]),s._v(" "),a("p",[s._v("比如说用户在登录的时候，使用了 or 1=1 来完成身份验证和授权。")]),s._v(" "),a("h2",{attrs:{id:"常见防御手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见防御手段"}},[s._v("#")]),s._v(" 常见防御手段")]),s._v(" "),a("ul",[a("li",[s._v("使用"),a("strong",[s._v("预编译语句")]),s._v("，比如 MyBatis 中的 SQL 语句使用 # 号代替 $ 符号。")]),s._v(" "),a("li",[s._v("使用安全的"),a("strong",[s._v("存储过程")]),s._v("来防止 SQL 注入。")]),s._v(" "),a("li",[s._v("对客户端的输入进行"),a("strong",[s._v("数据类型的检查")]),s._v("等。")])])])}),[],!1,null,null,null);t.default=v.exports},677:function(s,t,_){s.exports=_.p+"assets/img/9d673e2a8d03337b5494817138c8c1ea.9d673e2a.png"},678:function(s,t,_){s.exports=_.p+"assets/img/618223244d22a3af487c0c52d8ae8fa4.61822324.png"}}]);